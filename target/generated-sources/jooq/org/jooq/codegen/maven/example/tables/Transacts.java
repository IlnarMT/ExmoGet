/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.Indexes;
import org.jooq.codegen.maven.example.Keys;
import org.jooq.codegen.maven.example.Public;
import org.jooq.codegen.maven.example.tables.records.TransactsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transacts extends TableImpl<TransactsRecord> {

    private static final long serialVersionUID = -888852241;

    /**
     * The reference instance of <code>public.transacts</code>
     */
    public static final Transacts TRANSACTS = new Transacts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactsRecord> getRecordType() {
        return TransactsRecord.class;
    }

    /**
     * The column <code>public.transacts.trade_id</code>.
     */
    public final TableField<TransactsRecord, Long> TRADE_ID = createField("trade_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transacts.trade_pair</code>.
     */
    public final TableField<TransactsRecord, String> TRADE_PAIR = createField("trade_pair", org.jooq.impl.SQLDataType.VARCHAR(16).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.transacts.type</code>.
     */
    public final TableField<TransactsRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(8).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.transacts.quantity</code>.
     */
    public final TableField<TransactsRecord, BigDecimal> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.transacts.price</code>.
     */
    public final TableField<TransactsRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.transacts.amount</code>.
     */
    public final TableField<TransactsRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.transacts.date</code>.
     */
    public final TableField<TransactsRecord, Long> DATE = createField("date", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.transacts</code> table reference
     */
    public Transacts() {
        this(DSL.name("transacts"), null);
    }

    /**
     * Create an aliased <code>public.transacts</code> table reference
     */
    public Transacts(String alias) {
        this(DSL.name(alias), TRANSACTS);
    }

    /**
     * Create an aliased <code>public.transacts</code> table reference
     */
    public Transacts(Name alias) {
        this(alias, TRANSACTS);
    }

    private Transacts(Name alias, Table<TransactsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transacts(Name alias, Table<TransactsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transacts(Table<O> child, ForeignKey<O, TransactsRecord> key) {
        super(child, key, TRANSACTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactsRecord> getPrimaryKey() {
        return Keys.TRANSACTS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactsRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactsRecord>>asList(Keys.TRANSACTS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transacts as(String alias) {
        return new Transacts(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transacts as(Name alias) {
        return new Transacts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transacts rename(String name) {
        return new Transacts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transacts rename(Name name) {
        return new Transacts(name, null);
    }
}
