/*
 * This file is generated by jOOQ.
 */
package org.jooq.codegen.maven.example;


import javax.annotation.Generated;

import org.jooq.UniqueKey;
import org.jooq.codegen.maven.example.tables.Author;
import org.jooq.codegen.maven.example.tables.Transacts;
import org.jooq.codegen.maven.example.tables.records.AuthorRecord;
import org.jooq.codegen.maven.example.tables.records.TransactsRecord;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = UniqueKeys0.AUTHOR_PKEY;
    public static final UniqueKey<TransactsRecord> TRANSACTS_PKEY = UniqueKeys0.TRANSACTS_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, "author_pkey", Author.AUTHOR.ID);
        public static final UniqueKey<TransactsRecord> TRANSACTS_PKEY = Internal.createUniqueKey(Transacts.TRANSACTS, "transacts_pkey", Transacts.TRANSACTS.TRADE_ID);
    }
}
